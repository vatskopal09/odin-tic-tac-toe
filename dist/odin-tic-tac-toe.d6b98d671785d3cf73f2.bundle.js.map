{"version":3,"file":"odin-tic-tac-toe.d6b98d671785d3cf73f2.bundle.js","mappings":"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","sources":["webpack://top-javascript-study/./odin-tic-tac-toe/app/game-events.js","webpack://top-javascript-study/./odin-tic-tac-toe/app/game-board.js","webpack://top-javascript-study/./odin-tic-tac-toe/app/display.js","webpack://top-javascript-study/./odin-tic-tac-toe/app/game.js","webpack://top-javascript-study/./odin-tic-tac-toe/index.js"],"sourcesContent":["export default (function () {\n  // Game events' names\n  const START_EVENT_NAME = 'start';\n  const STARTED_EVENT_NAME = 'started';\n  const HARD_GAME_EVENT_NAME = 'hard';\n  const MEDIUM_GAME_EVENT_NAME = 'medium';\n  const EASY_GAME_EVENT_NAME = 'easy';\n  const ONE_PLAYER_GAME_EVENT_NAME = 'oneplayergame';\n  const WIN_EVENT_NAME = 'win';\n  const TIE_EVENT_NAME = 'tie';\n  const MARK_EVENT_NAME = 'mark';\n  const MARKING_EVENT_NAME = 'marking';\n  const MARKED_EVENT_NAME = 'marked';\n  const RESET_EVENT_NAME = 'reset';\n  const RESET_BOARD_EVENT_NAME = 'resetboard';\n  const RESTART_EVENT_NAME = 'restart';\n  const COMPUTER_TURN_EVENT_NAME = 'computerturn';\n  const USER_TURN_EVENT_NAME = 'userturn';\n  // Game events' state\n  let events;\n\n  function init() {\n    events = {};\n  }\n\n  function add(eventName, callbackfn) {\n    if (typeof eventName === 'string' && typeof callbackfn === 'function') {\n      events[eventName] = events[eventName] ?? [];\n      events[eventName].push(callbackfn);\n    }\n  }\n\n  function remove(eventName, callbackfn) {\n    if (typeof eventName === 'string') {\n      const callbacks = events[eventName];\n      if (Array.isArray(callbacks)) {\n        const i = callbacks.indexOf(callbackfn);\n        if (i > -1) {\n          callbacks.splice(i, 1);\n          if (callbacks.length < 1) delete events[eventName];\n        }\n      }\n    }\n  }\n\n  function emit(eventName, ...args) {\n    if (typeof eventName === 'string') {\n      const callbacks = events[eventName];\n      if (Array.isArray(callbacks)) {\n        callbacks.forEach((callbackfn) => callbackfn(...args));\n      }\n    }\n  }\n\n  return {\n    init,\n    add,\n    remove,\n    emit,\n    START_EVENT_NAME,\n    STARTED_EVENT_NAME,\n    HARD_GAME_EVENT_NAME,\n    MEDIUM_GAME_EVENT_NAME,\n    EASY_GAME_EVENT_NAME,\n    ONE_PLAYER_GAME_EVENT_NAME,\n    WIN_EVENT_NAME,\n    MARK_EVENT_NAME,\n    MARKING_EVENT_NAME,\n    MARKED_EVENT_NAME,\n    TIE_EVENT_NAME,\n    RESET_EVENT_NAME,\n    RESET_BOARD_EVENT_NAME,\n    RESTART_EVENT_NAME,\n    COMPUTER_TURN_EVENT_NAME,\n    USER_TURN_EVENT_NAME,\n  };\n})();\n","export default (function () {\n  const board = Array(9);\n  const usedCells = [];\n  let gameEvents, computerCallbackTimeout, justStarted, hard, medium, easy;\n\n  function resetState() {\n    board.fill('', 0);\n    usedCells.splice(0);\n    clearTimeout(computerCallbackTimeout);\n    justStarted = false;\n  }\n\n  function isWin(boardArr) {\n    // For every set of board cells (row, column or diagonal),\n    // check whether first cell is not empty\n    // and is equal the other cells in the set.\n    return (\n      // 1st row\n      (boardArr[0] &&\n        boardArr[0] === boardArr[1] &&\n        boardArr[1] === boardArr[2]) ||\n      // 2nd row\n      (boardArr[3] &&\n        boardArr[3] === boardArr[4] &&\n        boardArr[4] === boardArr[5]) ||\n      // 3rd row\n      (boardArr[6] &&\n        boardArr[6] === boardArr[7] &&\n        boardArr[7] === boardArr[8]) ||\n      // 1st column\n      (boardArr[0] &&\n        boardArr[0] === boardArr[3] &&\n        boardArr[3] === boardArr[6]) ||\n      // 2nd column\n      (boardArr[1] &&\n        boardArr[1] === boardArr[4] &&\n        boardArr[4] === boardArr[7]) ||\n      // 3rd column\n      (boardArr[2] &&\n        boardArr[2] === boardArr[5] &&\n        boardArr[5] === boardArr[8]) ||\n      // Diagonal\n      (boardArr[0] &&\n        boardArr[0] === boardArr[4] &&\n        boardArr[4] === boardArr[8]) ||\n      // Diagonal\n      (boardArr[6] &&\n        boardArr[6] === boardArr[4] &&\n        boardArr[4] === boardArr[2])\n    );\n  }\n\n  function isValidPlace(placeIndex) {\n    return !board[placeIndex];\n  }\n\n  function isEmptyPlace() {\n    for (let i = 0; i < board.length; i++) {\n      if (!board[i]) {\n        return true;\n      }\n    }\n  }\n\n  function validateIndex(placeIndex) {\n    const i = Number(placeIndex);\n    if (Number.isInteger(i) && i >= 0 && i < 9) {\n      return i;\n    }\n    return -1;\n  }\n\n  function checkForWin(type) {\n    if (isWin(board)) {\n      gameEvents.emit(gameEvents.WIN_EVENT_NAME, type);\n    } else if (!isEmptyPlace()) {\n      gameEvents.emit(gameEvents.TIE_EVENT_NAME);\n    }\n  }\n\n  function mark(placeIndex, type) {\n    justStarted = false;\n    const i = validateIndex(placeIndex);\n    if (i > -1) {\n      if (isEmptyPlace() && isValidPlace(i)) {\n        board[i] = type;\n        usedCells.push(i);\n        checkForWin(type);\n        gameEvents.emit(gameEvents.MARKED_EVENT_NAME, i, type);\n      }\n    }\n  }\n\n  function selectRandomly() {\n    let i;\n    do {\n      i = Math.floor(Math.random() * 9);\n    } while (usedCells.includes(i));\n    return i;\n  }\n\n  function shuffleArray(arr) {\n    const newArr = [...arr];\n    // Fisher-Yates shuffle algorithm\n    for (let i = newArr.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      // Swap current element with random choice from left behind group of elements\n      [newArr[i], newArr[j]] = [newArr[j], newArr[i]];\n    }\n    return newArr;\n  }\n\n  function selectSpecial() {\n    // Select cell in the middle/corners\n    if (!usedCells.includes(4)) return 4;\n    const specials = shuffleArray([0, 2, 6, 8]);\n    for (let i = 0; i < specials.length; i++) {\n      if (!usedCells.includes(specials[i])) return specials[i];\n    }\n    return null;\n  }\n\n  function selectWinningCellIndex(boardArr, type) {\n    for (let i = 0; i < 9; i++) {\n      if (!usedCells.includes(i)) {\n        const oldValue = boardArr[i];\n        boardArr[i] = type;\n        if (isWin(boardArr)) return i;\n        boardArr[i] = oldValue;\n      }\n    }\n    return null;\n  }\n\n  function selectCleverly(computerType, userType) {\n    const boardCopy = [...board];\n    // If it is a hard game:\n    return hard\n      ? // Win, prevent user's win, select special cell or select any\n        selectWinningCellIndex(boardCopy, computerType) ??\n          selectWinningCellIndex(boardCopy, userType) ??\n          selectSpecial() ??\n          selectRandomly()\n      : // Win, prevent user's win or select any\n        selectWinningCellIndex(boardCopy, computerType) ??\n          selectWinningCellIndex(boardCopy, userType) ??\n          selectRandomly();\n  }\n\n  function selectEasily(computerType, userType) {\n    const boardCopy = [...board];\n    // Random the possibilities of preventing user's win\n    const varDenominator = Math.floor(Math.random() * 2) + 2;\n    return (\n      // Win\n      selectWinningCellIndex(boardCopy, computerType) ??\n      // Prevent user's win, but not every time\n      (usedCells.length % varDenominator === 0\n        ? selectWinningCellIndex(boardCopy, userType)\n        : null) ??\n      // Select any\n      selectRandomly()\n    );\n  }\n\n  function onComputerTurn(computerType, userType) {\n    let selectedCellIndex;\n    if (hard || medium) {\n      selectedCellIndex = selectCleverly(computerType, userType);\n    } else {\n      selectedCellIndex = selectEasily(computerType, userType);\n    }\n    computerCallbackTimeout = setTimeout(\n      () => {\n        mark(selectedCellIndex, computerType);\n        gameEvents.emit(\n          gameEvents.MARKED_EVENT_NAME,\n          selectedCellIndex,\n          computerType,\n        );\n        gameEvents.emit(gameEvents.USER_TURN_EVENT_NAME);\n      },\n      justStarted ? 1500 : 1000, // Respect start animation\n    );\n  }\n\n  function onMarking(cellIndex, type) {\n    mark(cellIndex, type);\n  }\n\n  function onResetBoard() {\n    resetState();\n  }\n\n  function onStart() {\n    justStarted = true;\n  }\n\n  function onHard() {\n    hard = true;\n  }\n\n  function onMedium() {\n    medium = true;\n  }\n\n  function onEasy() {\n    easy = true;\n  }\n\n  function init(globalGameEvents) {\n    gameEvents = globalGameEvents;\n    hard = false;\n    medium = false;\n    easy = false;\n    resetState();\n    gameEvents.add(gameEvents.RESET_BOARD_EVENT_NAME, onResetBoard);\n    gameEvents.add(gameEvents.START_EVENT_NAME, onStart);\n    gameEvents.add(gameEvents.HARD_GAME_EVENT_NAME, onHard);\n    gameEvents.add(gameEvents.MEDIUM_GAME_EVENT_NAME, onMedium);\n    gameEvents.add(gameEvents.EASY_GAME_EVENT_NAME, onEasy);\n    gameEvents.add(gameEvents.COMPUTER_TURN_EVENT_NAME, onComputerTurn);\n    gameEvents.add(gameEvents.MARKING_EVENT_NAME, onMarking);\n  }\n\n  return { init };\n})();\n","export default (function () {\n  const dialog = document.createElement('dialog'),\n    boardCells = [];\n  let gameEvents,\n    gameUI,\n    playersNum,\n    xScore,\n    oScore,\n    ties,\n    currentPlayer,\n    resetBtn;\n\n  function startAnimation(element) {\n    element.setAttribute('style', 'opacity: 0; transform: scale(75%);');\n  }\n\n  function endAnimation(element) {\n    setTimeout(() => {\n      element.setAttribute('style', 'opacity: 1; transform: scale(100%);');\n      element.removeAttribute('style');\n    }, 200);\n  }\n\n  function createElement(tagName, className, textContent, attrs) {\n    const element = document.createElement(tagName);\n    if (className) element.className = className;\n    if (textContent) element.textContent = textContent;\n    if (Array.isArray(attrs) && attrs.length > 0) {\n      for (let i = 0; i < attrs.length; i++) {\n        if (Array.isArray(attrs[i]) && attrs[i].length === 2) {\n          element.setAttribute(attrs[i][0], attrs[i][1]);\n        }\n      }\n    }\n    return element;\n  }\n\n  function createGameUI() {\n    // Game control section\n    const settings = createElement('div', 'settings');\n    playersNum = createElement('div', 'players-num', '2 Players');\n    resetBtn = createElement('button', 'reset circle-btn', '↺', [\n      ['type', 'button'],\n    ]);\n    resetBtn.addEventListener('click', () =>\n      gameEvents.emit(gameEvents.RESET_EVENT_NAME),\n    );\n    settings.append(playersNum, resetBtn);\n    const scores = createElement('div', 'scores');\n    const xScoreDiv = createElement('div');\n    xScore = createElement('span', 'x-score', '0');\n    xScoreDiv.append(document.createTextNode('X: '), xScore);\n    const tiesDiv = createElement('div');\n    ties = createElement('span', 'ties', '0');\n    tiesDiv.append(document.createTextNode('Ties: '), ties);\n    const oScoreDiv = createElement('div');\n    oScore = createElement('span', 'o-score', '0');\n    oScoreDiv.append(document.createTextNode('O: '), oScore);\n    scores.append(xScoreDiv, tiesDiv, oScoreDiv);\n    const control = createElement('div', 'control');\n    control.append(settings, scores);\n    // Game board section\n    const playerTurn = createElement('div', 'player-turn');\n    currentPlayer = createElement('span', 'current-player', 'X');\n    playerTurn.append(currentPlayer, document.createTextNode(' Turn'));\n    const board = createElement('div', 'board-container');\n    for (let i = 0; i < 9; i++) {\n      const cell = createElement('div', 'board-cell');\n      cell.addEventListener('click', () => {\n        gameEvents.emit(gameEvents.MARK_EVENT_NAME, i);\n      });\n      board.appendChild(cell);\n      boardCells.push(cell);\n    }\n    board.append(\n      createElement('div', 'horizontal-divider first-h-div'),\n      createElement('div', 'horizontal-divider last-h-div'),\n      createElement('div', 'vertical-divider first-v-div'),\n      createElement('div', 'vertical-divider last-v-div'),\n    );\n    const game = createElement('div', 'game');\n    game.append(playerTurn, board);\n    // Game container\n    gameUI = createElement('div', 'container');\n    gameUI.append(control, game);\n  }\n\n  function showGameUI() {\n    startAnimation(gameUI);\n    document.body.appendChild(gameUI);\n    endAnimation(gameUI);\n  }\n\n  function createChoicesButtons(className, textContentArr, clickHandler) {\n    const buttons = [];\n    // Loop for the length of text content array\n    for (let i = 0; i < textContentArr.length; i++) {\n      buttons[i] = createElement('button', className, textContentArr[i], [\n        ['type', 'button'],\n        ['value', textContentArr[i].slice(0, 1).toLowerCase()],\n      ]);\n      buttons[i].addEventListener('click', clickHandler);\n    }\n    return buttons;\n  }\n\n  function createDialog(contentsArr) {\n    if (dialog.children.length > 0) {\n      // Empty the dialog\n      [...dialog.children].forEach((child) => child.remove());\n    }\n    const dialogContentDiv = createElement('div', 'dialog-content');\n    dialogContentDiv.append(...contentsArr);\n    dialog.appendChild(dialogContentDiv);\n  }\n\n  function showDialog() {\n    document.body.appendChild(dialog);\n    startAnimation(dialog);\n    dialog.showModal();\n    endAnimation(dialog);\n  }\n\n  function terminateDialog() {\n    dialog.close();\n    setTimeout(() => dialog.remove(), 500);\n  }\n\n  function showMessage(message) {\n    const closeButton = createElement(\n      'button',\n      'dialog-close circle-btn',\n      'x',\n      [['type', 'button']],\n    );\n    closeButton.addEventListener('click', terminateDialog);\n    const messageDiv = createElement('div', 'message', message);\n    createDialog([closeButton, messageDiv]);\n    setTimeout(showDialog, 500);\n  }\n\n  function askForDifficultyLevel(playerType) {\n    createDialog(\n      createChoicesButtons(\n        'difficulty-level',\n        ['Easy', 'Medium', 'Hard'],\n        (event) => {\n          const difficultyLevel = event.target.value;\n          terminateDialog();\n          showGameUI();\n          gameEvents.emit(\n            gameEvents.ONE_PLAYER_GAME_EVENT_NAME,\n            playerType,\n            difficultyLevel,\n          );\n        },\n      ),\n    );\n  }\n\n  function askForPlayerType() {\n    createDialog(\n      createChoicesButtons('players-type-choice', ['X', 'O'], (event) => {\n        askForDifficultyLevel(event.target.value);\n      }),\n    );\n  }\n\n  function handleNumOfPlayers(event) {\n    const numOfPlayers = Number(event.target.value);\n    gameEvents.emit(gameEvents.START_EVENT_NAME, numOfPlayers);\n    playersNum.textContent = numOfPlayers === 1 ? '1 Player' : '2 Players';\n  }\n\n  function resetBoard() {\n    boardCells.forEach((cell) => (cell.textContent = ''));\n  }\n\n  function resetState() {\n    playersNum.textContent = '1 Player';\n    xScore.textContent = '0';\n    oScore.textContent = '0';\n    ties.textContent = '0';\n    currentPlayer.textContent = 'X';\n  }\n\n  function invertCurrentPlayerType(type) {\n    if (type.toLowerCase() === 'x') {\n      currentPlayer.textContent = 'O';\n    } else {\n      currentPlayer.textContent = 'X';\n    }\n  }\n\n  function onStart(num) {\n    if (num === 1) {\n      askForPlayerType();\n    } else {\n      terminateDialog();\n      showGameUI();\n    }\n  }\n\n  function onStarted(type) {\n    currentPlayer.textContent = type;\n  }\n\n  function onMarked(cellIndex, type) {\n    boardCells[cellIndex].textContent = type;\n    invertCurrentPlayerType(type);\n  }\n\n  function onWin(type) {\n    showMessage('' + type + ' Win!');\n    if (type === 'X') {\n      let currentScore = Number(xScore.textContent);\n      xScore.textContent = currentScore ? ++currentScore : 1;\n    } else {\n      let currentScore = Number(oScore.textContent);\n      oScore.textContent = currentScore ? ++currentScore : 1;\n    }\n  }\n\n  function onTie() {\n    showMessage('Tie!');\n    let currentTies = Number(ties.textContent);\n    ties.textContent = currentTies ? ++currentTies : 1;\n  }\n\n  function onResetBoard(type) {\n    currentPlayer.textContent = type;\n    resetBoard();\n  }\n\n  function onHard() {\n    const gameLevelSpan = createElement('span', 'game-level', ' (Hard)');\n    playersNum.appendChild(gameLevelSpan);\n  }\n\n  function onMedium() {\n    const gameLevelSpan = createElement('span', 'game-level', ' (Medium)');\n    playersNum.appendChild(gameLevelSpan);\n  }\n\n  function onEasy() {\n    const gameLevelSpan = createElement('span', 'game-level', ' (Easy)');\n    playersNum.appendChild(gameLevelSpan);\n  }\n\n  function init(globalGameEvents) {\n    gameEvents = globalGameEvents;\n    if (!gameUI) createGameUI();\n    gameEvents.add(gameEvents.START_EVENT_NAME, onStart);\n    gameEvents.add(gameEvents.STARTED_EVENT_NAME, onStarted);\n    gameEvents.add(gameEvents.WIN_EVENT_NAME, onWin);\n    gameEvents.add(gameEvents.TIE_EVENT_NAME, onTie);\n    gameEvents.add(gameEvents.MARKED_EVENT_NAME, onMarked);\n    gameEvents.add(gameEvents.RESET_BOARD_EVENT_NAME, onResetBoard);\n    gameEvents.add(gameEvents.HARD_GAME_EVENT_NAME, onHard);\n    gameEvents.add(gameEvents.MEDIUM_GAME_EVENT_NAME, onMedium);\n    gameEvents.add(gameEvents.EASY_GAME_EVENT_NAME, onEasy);\n    resetState();\n    resetBoard();\n    createDialog(\n      createChoicesButtons(\n        'players-num-choice',\n        ['1 Player', '2 Players'],\n        handleNumOfPlayers,\n      ),\n    );\n    showDialog();\n  }\n\n  return { init };\n})();\n","export default (function () {\n  let gameEvents,\n    roundCount,\n    players,\n    currentPlayer,\n    numOfPlayers,\n    userType,\n    computerType,\n    computerTurn,\n    gameStarted,\n    boardRestarted,\n    win,\n    tie,\n    markCount;\n\n  function createPlayer(type) {\n    let score = 0;\n\n    function getType() {\n      return type;\n    }\n\n    function getScore() {\n      return score;\n    }\n\n    function incrementScore() {\n      return ++score;\n    }\n\n    return { getType, getScore, incrementScore };\n  }\n\n  function invertCurrentPlayer() {\n    markCount++;\n    currentPlayer = players[markCount % 2];\n  }\n\n  function resetState() {\n    win = false;\n    tie = false;\n    markCount = roundCount;\n    currentPlayer = players[markCount % 2];\n    boardRestarted = true;\n    computerTurn =\n      numOfPlayers === 1 && computerType === currentPlayer.getType();\n  }\n\n  function setPlayersTypes(type) {\n    if (type.toUpperCase() === players[0].getType()) {\n      [userType, computerType] = [players[0].getType(), players[1].getType()];\n    } else {\n      [computerType, userType] = [players[0].getType(), players[1].getType()];\n    }\n  }\n\n  function announceGameDifficulty(difficultyLevel) {\n    difficultyLevel = difficultyLevel.toLowerCase();\n    if (difficultyLevel === 'h') {\n      gameEvents.emit(gameEvents.HARD_GAME_EVENT_NAME);\n    } else if (difficultyLevel === 'm') {\n      gameEvents.emit(gameEvents.MEDIUM_GAME_EVENT_NAME);\n    } else {\n      gameEvents.emit(gameEvents.EASY_GAME_EVENT_NAME);\n    }\n  }\n\n  function setComputerTurn() {\n    computerTurn = computerType === currentPlayer.getType();\n    if (computerTurn) {\n      gameEvents.emit(\n        gameEvents.COMPUTER_TURN_EVENT_NAME,\n        computerType,\n        userType,\n      );\n    }\n  }\n\n  function onStart(value) {\n    const num = Number(value);\n    if (!Number.isNaN(num)) {\n      numOfPlayers = num;\n      gameStarted = num === 2;\n      if (gameStarted) {\n        gameEvents.emit(gameEvents.STARTED_EVENT_NAME, currentPlayer.getType());\n      }\n    }\n  }\n\n  function onOneGamePlayer(type, difficultyLevel) {\n    setPlayersTypes(type);\n    announceGameDifficulty(difficultyLevel);\n    setComputerTurn();\n    gameEvents.emit(gameEvents.STARTED_EVENT_NAME, currentPlayer.getType());\n    gameStarted = true;\n  }\n\n  function onMark(cellIndex) {\n    if (gameStarted && !computerTurn && !win && !tie) {\n      gameEvents.emit(\n        gameEvents.MARKING_EVENT_NAME,\n        cellIndex,\n        currentPlayer.getType(),\n      );\n    }\n  }\n\n  function onMarked() {\n    invertCurrentPlayer();\n    if (numOfPlayers === 1 && !computerTurn && !win && !tie) {\n      gameEvents.emit(\n        gameEvents.COMPUTER_TURN_EVENT_NAME,\n        computerType,\n        userType,\n      );\n      computerTurn = true;\n    }\n    boardRestarted = false;\n  }\n\n  function onUserTurn() {\n    computerTurn = false;\n    invertCurrentPlayer();\n  }\n\n  function onWin() {\n    roundCount++;\n    win = true;\n    tie = false;\n  }\n\n  function onTie() {\n    roundCount++;\n    tie = true;\n    win = false;\n  }\n\n  function onReset() {\n    if (!boardRestarted) {\n      resetState();\n      gameEvents.emit(\n        gameEvents.RESET_BOARD_EVENT_NAME,\n        currentPlayer.getType(),\n      );\n      if (computerTurn) {\n        gameEvents.emit(\n          gameEvents.COMPUTER_TURN_EVENT_NAME,\n          computerType,\n          userType,\n        );\n      }\n    } else {\n      gameEvents.emit(gameEvents.RESTART_EVENT_NAME, currentPlayer.getType());\n    }\n  }\n\n  function init(globalGameEvents) {\n    gameEvents = globalGameEvents;\n    roundCount = 0;\n    players = [createPlayer('X'), createPlayer('O')];\n    currentPlayer = players[0];\n    numOfPlayers = 0;\n    userType = null;\n    computerType = null;\n    gameStarted = false;\n    resetState();\n    gameEvents.add(gameEvents.START_EVENT_NAME, onStart);\n    gameEvents.add(gameEvents.ONE_PLAYER_GAME_EVENT_NAME, onOneGamePlayer);\n    gameEvents.add(gameEvents.MARK_EVENT_NAME, onMark);\n    gameEvents.add(gameEvents.MARKED_EVENT_NAME, onMarked);\n    gameEvents.add(gameEvents.WIN_EVENT_NAME, onWin);\n    gameEvents.add(gameEvents.TIE_EVENT_NAME, onTie);\n    gameEvents.add(gameEvents.RESET_EVENT_NAME, onReset);\n    gameEvents.add(gameEvents.USER_TURN_EVENT_NAME, onUserTurn);\n  }\n\n  return { init };\n})();\n","import './styles/main.css';\n\nimport gameEvents from './app/game-events.js';\nimport gameBoard from './app/game-board.js';\nimport display from './app/display.js';\nimport game from './app/game.js';\n\n// Play a game\n(function startNewGame() {\n  gameEvents.init();\n  gameEvents.add(gameEvents.RESTART_EVENT_NAME, startNewGame);\n  gameBoard.init(gameEvents), game.init(gameEvents), display.init(gameEvents);\n})();\n"],"names":["events","init","add","eventName","callbackfn","_events$eventName","push","remove","callbacks","Array","isArray","i","indexOf","splice","length","emit","_len","arguments","args","_key","forEach","apply","START_EVENT_NAME","STARTED_EVENT_NAME","HARD_GAME_EVENT_NAME","MEDIUM_GAME_EVENT_NAME","EASY_GAME_EVENT_NAME","ONE_PLAYER_GAME_EVENT_NAME","WIN_EVENT_NAME","MARK_EVENT_NAME","MARKING_EVENT_NAME","MARKED_EVENT_NAME","TIE_EVENT_NAME","RESET_EVENT_NAME","RESET_BOARD_EVENT_NAME","RESTART_EVENT_NAME","COMPUTER_TURN_EVENT_NAME","USER_TURN_EVENT_NAME","gameEvents","computerCallbackTimeout","justStarted","hard","medium","board","usedCells","resetState","fill","clearTimeout","isWin","boardArr","isEmptyPlace","mark","placeIndex","type","Number","isInteger","validateIndex","isValidPlace","checkForWin","selectRandomly","Math","floor","random","includes","selectSpecial","specials","arr","newArr","_toConsumableArray","j","_ref","shuffleArray","selectWinningCellIndex","oldValue","onComputerTurn","computerType","userType","selectedCellIndex","_ref2","_ref3","_selectWinningCellInd","_ref4","_selectWinningCellInd2","boardCopy","concat","selectCleverly","_ref5","_selectWinningCellInd3","varDenominator","selectEasily","setTimeout","onMarking","cellIndex","onResetBoard","onStart","onHard","onMedium","onEasy","globalGameEvents","gameUI","playersNum","xScore","oScore","ties","currentPlayer","resetBtn","dialog","document","createElement","boardCells","startAnimation","element","setAttribute","endAnimation","removeAttribute","tagName","className","textContent","attrs","showGameUI","body","appendChild","createChoicesButtons","textContentArr","clickHandler","buttons","slice","toLowerCase","addEventListener","createDialog","contentsArr","children","child","dialogContentDiv","append","showDialog","showModal","terminateDialog","close","showMessage","message","closeButton","handleNumOfPlayers","event","numOfPlayers","target","value","resetBoard","cell","num","playerType","difficultyLevel","onStarted","onMarked","invertCurrentPlayerType","onWin","currentScore","onTie","currentTies","gameLevelSpan","settings","scores","xScoreDiv","createTextNode","tiesDiv","oScoreDiv","control","playerTurn","_loop","game","createGameUI","roundCount","players","computerTurn","gameStarted","boardRestarted","win","tie","markCount","createPlayer","score","getType","getScore","incrementScore","invertCurrentPlayer","isNaN","onOneGamePlayer","toUpperCase","setPlayersTypes","announceGameDifficulty","onMark","onUserTurn","onReset","startNewGame","gameBoard","display"],"sourceRoot":""}